stages:
  - build
  - deploy

default:
  before_script:
    - docker login -u ${REGISTRY_USER} -p ${REGISTRY_PASS} ${REGISTRY_URL}


variables:
  SSH_PORT: 22
  IMAGE_BASE_PATH: ${REGISTRY_URL}/task
  IMAGE_NAME: app
  SERVICE_PATH: /opt/services/app
  IMAGE_TAG_SHA: ${CI_COMMIT_SHORT_SHA}
  APP_VERSION: ${CI_COMMIT_TAG:-${CI_COMMIT_SHORT_SHA}}
  APP_NETWORK: app_network
build-django-job:
  stage: build
  script:
    - cd django
    - docker build -t ${IMAGE_BASE_PATH}/${IMAGE_NAME}:${IMAGE_TAG_SHA} .
    - docker push ${IMAGE_BASE_PATH}/$IMAGE_NAME:${IMAGE_TAG_SHA}
    - |
      if [ -n "$CI_COMMIT_TAG" ]; then
        echo "Detected tag: $CI_COMMIT_TAG"
        docker tag ${IMAGE_BASE_PATH}/${IMAGE_NAME}:${IMAGE_T    AG_SHA ${IMAGE_BASE_PATH}/${IMAGE_NAME}:${CI_COMMIT_TAG}
        docker push ${IMAGE_BASE_PATH}/${IMAGE_NAME}:${CI_COMMIT_TAG}
      fi
  retry: 2

deploy-to-production:
  stage: deploy
  rules:
    - if: "CI_COMMIT_TAG"
      when: manual
  image: IMAGE_BASE_PATH/runner-image:ssh
  variables:
    DOMAIN: production.test.tld
    SERVER_NAME: production.test.tld
    HOSTNAME: production
  before_script:
    - 'command -v ssh-agent >/dev/null || ( apk add --update openssh )'
    - eval $(ssh-agent -s)
    - chmod 400 "$SSH_PRIVATE_KEY"
    - ssh-add "$SSH_PRIVATE_KEY"
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
  script:
    - |
      # Create directory if not exist
      ssh -o StrictHostKeyChecking=no -p ${SSH_PORT} ${SSH_USER}@${SERVER_NAME} "
      [ -d ${SERVICE_PATH} ] || mkdir -p ${SERVICE_PATH}
      "
      # change env file
      sed -i "s/PIPELINE_ID/${APP_VERSION}/g" .env
      # move compose and env file to server
      scp -o StrictHostKeyChecking=no -P${SSH_PORT} .env ${SSH_USER}@${SERVER_NAME}:${SERVICE_PATH}/
      scp -o StrictHostKeyChecking=no -P${SSH_PORT} docker-compose.yml ${SSH_USER}@${SERVER_NAME}:${SERVICE_PATH}/
      # deploy service on server
      ssh -o StrictHostKeyChecking=no -p ${SSH_PORT} ${SSH_USER}@${SERVER_NAME} "
      sudo docker login -u ${REGISTRY_USER} -p ${REGISTRY_PASS} ${REGISTRY_URL}
      sudo docker network ls | grep ${APP_NETWORK} || docker network create ${APP_NETWORK}
      cd ${SERVICE_PATH}
      sudo docker compose pull
      sudo docker compose up -d
      "
